<?php

namespace Debugmate\Console;

use Debugmate\Exceptions\DebugmateErrorHandler;
use Exception;
use Illuminate\Console\Command;
use Monolog\DateTimeImmutable;
use Monolog\Level;
use Monolog\LogRecord;
use Symfony\Component\Console\Command\Command as Status;

class TestDebugmateCommand extends Command
{
    protected $signature = 'debugmate:test';

    protected $description = 'Send fake data to webhook';

    public function handle(): int
    {
        if (!config('debugmate.enabled')) {
            $this->error('You must set DEBUGMATE_ENABLED env to true');

            return Status::FAILURE;
        }

        if (!config('debugmate.domain')) {
            $this->error('You must fill DEBUGMATE_DOMAIN env with a valid debugmate endpoint');

            return Status::FAILURE;
        }

        if (!config('logging.channels.debugmate.driver')) {
            $this->error('Debugmate logging config not found. Add it to config/logging.php');

            $sample = <<<CODE
'channels' => [
    // ...
    'debugmate' => [
        'driver' => 'debugmate',
    ],
],
CODE;

            $this->info($sample);

            return Status::FAILURE;
        }

        if (!in_array('debugmate', config('logging.channels.stack.channels'))) {
            $this->error('Debugmate logging config not found at stack channels. Fill environment LOG_STACK with "debugmate"');

            $code = <<<CODE
// ...
LOG_STACK=single,debugmate
// ...
CODE;

            $this->info($code);

            return Status::FAILURE;
        }

        /** @var DebugmateErrorHandler $errorHandler */
        $errorHandler = app(DebugmateErrorHandler::class);
        $errorHandler->handle(new LogRecord(
            datetime: new DateTimeImmutable(true),
            channel: 'debugmate',
            level: Level::Error,
            message: 'Test generated by the debugmate:test artisan command',
            context: [
                'exception' => new Exception('Test generated by the debugmate:test artisan command'),
            ]
        ));

        if ($errorHandler->failed() === true || $errorHandler->failed() === null) {
            $this->error('We couldn\'t reach Debugmate Server at ' . config('debugmate.domain'));
            $this->error($errorHandler->reason());

            return Status::FAILURE;
        }

        $this->info(
            "Debugmate reached successfully. We sent a test Exception that has been registered."
        );

        return Status::SUCCESS;
    }
}
